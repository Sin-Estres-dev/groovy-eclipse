<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2009-2024 the original author or authors.
   
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
   
       https://www.apache.org/licenses/LICENSE-2.0
   
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<templates>

<template name="ase"
	description="assert equals"
	id="org.codehaus.groovy.eclipse.templates.ase"
	autoinsert="true"
	context="groovy"
	enabled="true"
>assert ${actual:var(java.lang.Object)} == ${expect:var(java.lang.Object)}</template>

<template name="asn"
	description="assert non-null"
	id="org.codehaus.groovy.eclipse.templates.asn"
	autoinsert="true"
	context="groovy"
	enabled="true"
>assert ${actual:var(java.lang.Object)} != null</template>

<template name="closure"
	description="closure block (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.closure"
	autoinsert="false"
	context="groovy"
	enabled="true"
>{ ${parameters} ->
	${line_selection}${cursor}
}</template>

<template name="def"
	description="define variable (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.def"
	autoinsert="true"
	context="groovy"
	enabled="true"
>def ${:word_selection(name)} = ${value}${cursor}</template>

<template name="for_in"
	description="for..in loop (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.for_in"
	autoinsert="false"
	context="groovy"
	enabled="true"
>for (${iterable_element} in ${iterable}) {
	${line_selection}${cursor}
}</template>

<template name="if"
	description="if statement (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.if"
	autoinsert="false"
	context="groovy"
	enabled="true"
>if (${condition}) {
	${line_selection}${cursor}
}</template>

<template name="println"
	description="print to standard out (Groovy)"
	id="org.eclipse.jdt.ui.templates.println"
	autoinsert="true"
	context="groovy"
	enabled="true"
>println ${word_selection}${}${cursor}</template>

<template name="sysout"
	description="print to standard out (Groovy)"
	id="org.eclipse.jdt.ui.templates.sysout"
	autoinsert="true"
	context="groovy"
	enabled="true"
>println ${word_selection}${}${cursor}</template>

<template name="synchronized"
	description="synchronized block (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.synchronized"
	autoinsert="false"
	context="groovy"
	enabled="true"
>synchronized (${lock}) {
	${line_selection}${cursor}
}</template>

<template name="try"
	description="try catch block (Groovy)"
	id="org.eclipse.jdt.ui.templates.try"
	autoinsert="false"
	context="groovy"
	enabled="true"
>try {
	${line_selection}${cursor}
} catch (${e}) {
	${e}.printStackTrace()
}</template>

<template name="use"
	description="use block (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.use"
	autoinsert="false"
	context="groovy"
	enabled="true"
>use (${category}) {
	${line_selection}${cursor}
}</template>

<template name="while"
	description="while loop (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.while_condition"
	autoinsert="false"
	context="groovy"
	enabled="true"
>while (${condition}) {
	${line_selection}${cursor}
}</template>

<!-- GContracts -->

<template name="Invariant"
	description="GContracts invariant(s)"
	id="org.eclipse.jdt.ui.templates.invariant"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${:newType(groovy.contracts.Invariant)}({ ${predicate} })</template>

<template name="Requires"
	description="GContracts precondition(s)"
	id="org.eclipse.jdt.ui.templates.requires"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${:newType(groovy.contracts.Requires)}({ ${predicate} })</template>

<template name="Ensures"
	description="GContracts postcondition(s)"
	id="org.eclipse.jdt.ui.templates.ensures"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${:newType(groovy.contracts.Ensures)}({ ${predicate} })</template>

<!-- JUnit -->

<template name="Before"
	description="before method (JUnit 4) (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.before"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${:newType(org.junit.Before)}
void setUp() {
	${cursor}
}</template>

<template name="BeforeEach"
	description="before method (JUnit 5) (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.before_each"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${:newType(org.junit.jupiter.api.BeforeEach)}
void setUp() {
	${cursor}
}</template>

<template name="After"
	description="after method (JUnit 4) (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.after"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${:newType(org.junit.After)}
void tearDown() {
	${cursor}
}</template>

<template name="AfterEach"
	description="after method (JUnit 5) (Groovy)"
	id="org.codehaus.groovy.eclipse.templates.after_each"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${:newType(org.junit.jupiter.api.AfterEach)}
void tearDown() {
	${cursor}
}</template>

<template name="test"
	description="test method (JUnit 3) (Groovy)"
	id="org.eclipse.jdt.ui.templates.test_junit3"
	autoinsert="false"
	context="groovy"
	enabled="true"
>void test${Name}() {
	${cursor}
}</template>

<template name="Test"
	description="test method (JUnit 4) (Groovy)"
	id="org.eclipse.jdt.ui.templates.test_junit4"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${type:newType(org.junit.Test)}
void ${testName}() {
	${:importStatic('org.junit.Assert.*','org.junit.Assume.*')}${cursor}
}</template>

<template name="Test"
	description="test method (JUnit 5) (Groovy)"
	id="org.eclipse.jdt.ui.templates.test_junit5"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${type:newType(org.junit.jupiter.api.Test)} @${name:newType(org.junit.jupiter.api.DisplayName)}(&apos;${scenario_description}&apos;)
void ${testName}() {
	${:importStatic('org.junit.jupiter.api.Assertions.*','org.junit.jupiter.api.Assumptions.*')}${cursor}
}</template>

<template name="Test"
	description="tests method (JUnit 5) (Groovy)"
	id="org.eclipse.jdt.ui.templates.test_junit5_params"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${type:newType(org.junit.jupiter.params.ParameterizedTest)} ${params:import('org.junit.jupiter.params.provider.*')}@${values:link('MethodSource','ValueSource','EmptySource','NullSource')}()
void ${testName}(${input:var}) {
	${:importStatic('org.junit.jupiter.api.Assertions.*','org.junit.jupiter.api.Assumptions.*')}${cursor}
}</template>

<template name="Test"
	description="test factory method (JUnit 5) (Groovy)"
	id="org.eclipse.jdt.ui.templates.test_junit5_factory"
	autoinsert="false"
	context="groovy"
	enabled="true"
>@${type:newType(org.junit.jupiter.api.TestFactory)}
${returnType:link('DynamicNode','Stream&lt;DynamicNode&gt;','Collection&lt;DynamicNode&gt;','Iterable&lt;DynamicNode&gt;','Iterator&lt;DynamicNode&gt;','DynamicNode[]')} ${testFactoryName}() {
	// ${todo}: generate dynamic tests
	${node:import('org.junit.jupiter.api.DynamicNode')}${:importStatic('org.junit.jupiter.api.Assertions.*','org.junit.jupiter.api.Assumptions.*','org.junit.jupiter.api.DynamicContainer.*','org.junit.jupiter.api.DynamicTest.*')}${cursor}
}</template>

</templates>
